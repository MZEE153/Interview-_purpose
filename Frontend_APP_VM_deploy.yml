  trigger:
  branches:
    include:
      - main

pool: Deadpool

########################
# üèóÔ∏è Stage 1: CI - Build
########################
stages:
- stage: CI
  displayName: 'Build Stage'
  jobs:
  - job: Build_Job
    displayName: 'Install, Build & Test'
    steps:

      # Step 1: Set Node.js version
      - task: UseNode@1
        inputs:
          versionSource: 'spec'
        versionSpec: '16.x'

      # Step 2: Install dependencies
      - task: Npm@1
        inputs:
        command: 'install'
        displayName: 'Install Dependencies'

      # Step 3: Build the app
      - task: Npm@1
        inputs:
        command: 'custom'
        customCommand: 'run build'
        displayName: 'Build Application'

      # Step 4: Publish artifact
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/azeem'
          ArtifactName: 'drop'
          publishLocation: 'Container'

##########################
# üöÄ Stage 2: CD - Deploy
##########################
- stage: CD
  displayName: 'Deploy Stage'
  dependsOn: CI
  condition: succeeded()   # Deploy only if CI succeeded
  jobs:
  - deployment: DeployJob
    displayName: 'Deploy to Azure App Service'
    environment: 'dev'   # You can create environments in ADO
    strategy:
      runOnce:
        deploy:
          steps:
            # Step 1: Download artifact
            - task: DownloadBuildArtifacts@0
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'drop'
                downloadPath: '$(System.ArtifactsDirectory)'

            # Step 2: Deploy to Azure App Service
            - task: AzureWebApp@1
              inputs:
                azureSubscription: '<your-service-connection-name>'
                appName: '<your-app-service-name>'
                package: '$(System.ArtifactsDirectory)/drop/**'
####################################
#Final YAML (CI + CD to Azure VM)##
####################################

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

stages:

########################
# üß™ Stage 1: CI - Build
########################
- stage: CI
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Node.js App'
    steps:
      - checkout: self

      - task: UseNode@1
        inputs:
          version: '18.x'

      - script: npm install
        displayName: 'Install Dependencies'

      - script: npm run build
        displayName: 'Build App'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

########################
# üöÄ Stage 2: CD - Deploy to VM
########################
- stage: CD
  displayName: 'Deploy Stage'
  dependsOn: CI
  condition: succeeded()
  jobs:
  - deployment: DeployToVM
    displayName: 'SSH Deploy to Azure VM'
    environment: 'vm-dev'   # Optional, for approvals
    strategy:
      runOnce:
        deploy:
          steps:

            # Step 1: Download build artifacts
            - task: DownloadBuildArtifacts@0
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'drop'
                downloadPath: '$(System.ArtifactsDirectory)'

            # Step 2: Copy files to VM
            - task: CopyFilesOverSSH@0
              inputs:
                sshEndpoint: '<your-ssh-service-connection-name>'
                sourceFolder: '$(System.ArtifactsDirectory)/drop'
                contents: '**'
                targetFolder: '/var/www/myapp'   # destination folder in VM
                cleanTargetFolder: true
                overwrite: true

            # Step 3: Run app start command
            - task: SSH@0
              inputs:
                sshEndpoint: '<your-ssh-service-connection-name>'
                runOptions: 'commands'
                commands: |
                  cd /var/www/myapp
                  npm install --omit=dev
                  pm2 restart app.js || pm2 start app.js
